generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum ProjectMethodology {
  AGILE
  WATERFALL
  KANBAN
  SCRUM
  LEAN
  PRINCE2
  SAFE
  HYBRID
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  BLOCKED
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  BLOCKED
  COMPLETED
  CANCELLED
}

enum TimesheetStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model User {
  id               String               @id @default(cuid())
  name             String
  email            String               @unique
  avatar           String?
  role             String
  jobTitle         String?
  departmentId     String?
  managerId        String?
  hourlyRate       Float?
  weeklyCapacity   Float?               @default(40)
  isActive         Boolean              @default(true)
  startDate        DateTime?
  endDate          DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  
  // Existing relations
  createdBoards    KanbanBoard[]        @relation("BoardCreator")
  createdTemplates KanbanCardTemplate[] @relation("TemplateCreator")
  createdCards     KanbanCard[]         @relation("CardCreator")
  assignedCards    KanbanCard[]         @relation("CardAssignee")
  teamMemberships  ProjectTeamMember[]
  createdProjects  Project[]            @relation("ProjectCreator")
  programMemberships ProgramTeamMember[]
  createdPrograms  Program[]            @relation("ProgramCreator")
  portfolioMemberships PortfolioTeamMember[]
  createdPortfolios Portfolio[]         @relation("PortfolioCreator")
  createdTasks     Task[]               @relation("TaskCreator")
  assignedTasks    Task[]               @relation("TaskAssignee")
  taskComments     TaskComment[]        @relation("CommentCreator")
  createdBoardTemplates BoardTemplate[] @relation("BoardTemplateCreator")
  userKanbanBoards UserKanbanBoard[]    @relation("UserKanbanBoardOwner")
  createdUserKanbanCards UserKanbanCard[] @relation("UserKanbanCardCreator")
  assignedUserKanbanCards UserKanbanCard[] @relation("UserKanbanCardAssignee")
  
  // New relations for timesheet and resource management
  timeEntries      TimeEntry[]          @relation("TimeEntryUser")
  timesheets       Timesheet[]          @relation("TimesheetUser")
  approvedTimesheets Timesheet[]        @relation("TimesheetApprover")
  skills           UserSkill[]          @relation("UserSkills")
  department       Department?          @relation("DepartmentMembers", fields: [departmentId], references: [id])
  manager          User?                @relation("ManagerDirectReports", fields: [managerId], references: [id])
  directReports    User[]               @relation("ManagerDirectReports")
  managedDepartments Department[]       @relation("DepartmentManager")

  @@map("users")
}

model Project {
  id          String              @id @default(cuid())
  name        String
  description String
  methodology ProjectMethodology  @default(AGILE)
  status      ProjectStatus       @default(PLANNING)
  priority    Priority            @default(MEDIUM)
  progress    Int                 @default(0)
  startDate   DateTime
  dueDate     DateTime
  budget      Float
  lastUpdated DateTime            @default(now()) @updatedAt
  createdAt   DateTime            @default(now())
  createdBy   String
  portfolioId String?
  kanbanBoard KanbanBoard?
  kanbanCards KanbanCard[]
  tags        ProjectTag[]
  teamMembers ProjectTeamMember[]
  tasks       Task[]
  timeEntries TimeEntry[]         @relation("ProjectTimeEntries")
  skills      ProjectSkill[]      @relation("ProjectSkills")
  creator     User                @relation("ProjectCreator", fields: [createdBy], references: [id])
  portfolio   Portfolio?          @relation(fields: [portfolioId], references: [id])

  @@map("projects")
}

model ProjectTeamMember {
  id        String  @id @default(cuid())
  projectId String
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_team_members")
}

model ProjectTag {
  id        String  @id @default(cuid())
  projectId String
  tag       String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_tags")
}

model Program {
  id          String              @id @default(cuid())
  name        String
  description String
  methodology ProjectMethodology  @default(AGILE)
  status      ProjectStatus       @default(PLANNING)
  priority    Priority            @default(MEDIUM)
  progress    Int                 @default(0)
  startDate   DateTime
  dueDate     DateTime
  budget      Float
  lastUpdated DateTime            @default(now()) @updatedAt
  createdAt   DateTime            @default(now())
  createdBy   String
  tags        ProgramTag[]
  teamMembers ProgramTeamMember[]
  creator     User                @relation("ProgramCreator", fields: [createdBy], references: [id])

  @@map("programs")
}

model ProgramTeamMember {
  id        String  @id @default(cuid())
  programId String
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([programId, userId])
  @@map("program_team_members")
}

model ProgramTag {
  id        String  @id @default(cuid())
  programId String
  tag       String
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@map("program_tags")
}

model KanbanBoard {
  id          String         @id @default(cuid())
  name        String
  description String?
  projectId   String?        @unique
  order       Int            @default(0)
  isDefault   Boolean        @default(false)
  createdBy   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  creator     User           @relation("BoardCreator", fields: [createdBy], references: [id])
  project     Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columns     KanbanColumn[]

  @@map("kanban_boards")
}

model KanbanColumn {
  id          String       @id @default(cuid())
  name        String
  color       String?
  order       Int
  boardId     String
  maxWipLimit Int?
  isCollapsed Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  cards       KanbanCard[]
  board       KanbanBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("kanban_columns")
}

model KanbanCard {
  id          String       @id @default(cuid())
  title       String
  description String?
  order       Int
  columnId    String
  projectId   String?
  assigneeId  String?
  priority    String?
  dueDate     DateTime?
  labels      Json?
  coverColor  String?
  coverImage  String?
  checklist   Json?
  attachments Json?
  position    Float        @default(0)
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creator     User         @relation("CardCreator", fields: [createdBy], references: [id])
  assignee    User?        @relation("CardAssignee", fields: [assigneeId], references: [id])
  project     Project?     @relation(fields: [projectId], references: [id])
  column      KanbanColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@map("kanban_cards")
}

model KanbanCardTemplate {
  id          String   @id @default(cuid())
  name        String
  title       String
  description String?
  labels      Json?
  checklist   Json?
  coverColor  String?
  isPublic    Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation("TemplateCreator", fields: [createdBy], references: [id])

  @@map("kanban_card_templates")
}

model Portfolio {
  id          String                @id @default(cuid())
  name        String
  description String
  methodology ProjectMethodology    @default(AGILE)
  status      ProjectStatus         @default(PLANNING)
  priority    Priority              @default(MEDIUM)
  progress    Int                   @default(0)
  startDate   DateTime
  dueDate     DateTime
  budget      Float
  lastUpdated DateTime              @default(now()) @updatedAt
  createdAt   DateTime              @default(now())
  createdBy   String
  projects    Project[]
  tags        PortfolioTag[]
  teamMembers PortfolioTeamMember[]
  creator     User                  @relation("PortfolioCreator", fields: [createdBy], references: [id])

  @@map("portfolios")
}

model PortfolioTeamMember {
  id          String    @id @default(cuid())
  portfolioId String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, userId])
  @@map("portfolio_team_members")
}

model PortfolioTag {
  id          String    @id @default(cuid())
  portfolioId String
  tag         String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("portfolio_tags")
}

model Task {
  id              String            @id @default(cuid())
  title           String
  description     String?
  status          TaskStatus        @default(NOT_STARTED)
  priority        Priority          @default(MEDIUM)
  progress        Int               @default(0)
  startDate       DateTime?
  dueDate         DateTime?
  estimatedHours  Float?
  actualHours     Float?            @default(0)
  completedAt     DateTime?
  projectId       String?
  assigneeId      String?
  createdBy       String
  createdAt       DateTime          @default(now())
  lastUpdated     DateTime          @default(now()) @updatedAt
  
  project         Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee        User?             @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator         User              @relation("TaskCreator", fields: [createdBy], references: [id])
  tags            TaskTag[]
  comments        TaskComment[]
  dependencies    TaskDependency[]  @relation("DependentTask")
  dependentTasks  TaskDependency[]  @relation("BlockingTask")
  subtasks        Task[]            @relation("ParentTask")
  parentTask      Task?             @relation("ParentTask", fields: [parentTaskId], references: [id])
  parentTaskId    String?
  timeEntries     TimeEntry[]       @relation("TaskTimeEntries")

  @@map("tasks")
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tag    String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_tags")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  content   String
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  creator   User     @relation("CommentCreator", fields: [createdBy], references: [id])

  @@map("task_comments")
}

model TaskDependency {
  id              String @id @default(cuid())
  dependentTaskId String
  blockingTaskId  String
  createdAt       DateTime @default(now())
  
  dependentTask   Task   @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  blockingTask    Task   @relation("BlockingTask", fields: [blockingTaskId], references: [id], onDelete: Cascade)

  @@unique([dependentTaskId, blockingTaskId])
  @@map("task_dependencies")
}

model BoardTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?  // Added category field
  isPublic    Boolean  @default(false)
  layout      Json?    // Store board structure as JSON
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation("BoardTemplateCreator", fields: [createdBy], references: [id])

  @@map("board_templates")
}

model UserKanbanBoard {
  id          String       @id @default(cuid())
  name        String
  description String?
  userId      String
  order       Int          @default(0)
  isDefault   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation("UserKanbanBoardOwner", fields: [userId], references: [id], onDelete: Cascade)
  columns     UserKanbanColumn[]

  @@map("user_kanban_boards")
}

model UserKanbanColumn {
  id          String           @id @default(cuid())
  name        String
  color       String?
  order       Int
  boardId     String
  maxWipLimit Int?
  isCollapsed Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  cards       UserKanbanCard[]
  board       UserKanbanBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("user_kanban_columns")
}

model UserKanbanCard {
  id          String           @id @default(cuid())
  title       String
  description String?
  order       Int
  columnId    String
  assigneeId  String?
  priority    String?
  dueDate     DateTime?
  labels      Json?
  coverColor  String?
  coverImage  String?
  checklist   Json?
  attachments Json?
  position    Float            @default(0)
  createdBy   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  creator     User             @relation("UserKanbanCardCreator", fields: [createdBy], references: [id])
  assignee    User?            @relation("UserKanbanCardAssignee", fields: [assigneeId], references: [id])
  column      UserKanbanColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@map("user_kanban_cards")
}

// TIMESHEET MODELS
model Timesheet {
  id          String          @id @default(cuid())
  userId      String
  weekStarting DateTime
  weekEnding  DateTime
  status      TimesheetStatus @default(DRAFT)
  totalHours  Float          @default(0)
  notes       String?
  submittedAt DateTime?
  approvedAt  DateTime?
  approvedBy  String?
  rejectedAt  DateTime?
  rejectionReason String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user        User           @relation("TimesheetUser", fields: [userId], references: [id], onDelete: Cascade)
  approver    User?          @relation("TimesheetApprover", fields: [approvedBy], references: [id])
  timeEntries TimeEntry[]

  @@unique([userId, weekStarting])
  @@map("timesheets")
}

model TimeEntry {
  id          String    @id @default(cuid())
  timesheetId String
  userId      String
  projectId   String?
  taskId      String?
  date        DateTime
  startTime   DateTime?
  endTime     DateTime?
  hours       Float
  description String?
  billable    Boolean   @default(true)
  overtime    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  timesheet   Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
  user        User      @relation("TimeEntryUser", fields: [userId], references: [id], onDelete: Cascade)
  project     Project?  @relation("ProjectTimeEntries", fields: [projectId], references: [id])
  task        Task?     @relation("TaskTimeEntries", fields: [taskId], references: [id])

  @@map("time_entries")
}

// ORGANIZATIONAL HIERARCHY MODELS
model Department {
  id           String  @id @default(cuid())
  name         String
  code         String  @unique
  description  String?
  managerId    String?
  parentId     String?
  budget       Float?
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  manager      User?        @relation("DepartmentManager", fields: [managerId], references: [id])
  parent       Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children     Department[] @relation("DepartmentHierarchy")
  members      User[]       @relation("DepartmentMembers")

  @@map("departments")
}

// SKILLS MANAGEMENT MODELS
model Skill {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  category    String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  userSkills  UserSkill[]
  projectSkills ProjectSkill[]

  @@map("skills")
}

model UserSkill {
  id           String     @id @default(cuid())
  userId       String
  skillId      String
  level        SkillLevel
  yearsOfExp   Float?
  certifiedAt  DateTime?
  lastUsed     DateTime?
  isCertified  Boolean    @default(false)
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user         User       @relation("UserSkills", fields: [userId], references: [id], onDelete: Cascade)
  skill        Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@map("user_skills")
}

model ProjectSkill {
  id           String     @id @default(cuid())
  projectId    String
  skillId      String
  requiredLevel SkillLevel
  priority     Priority   @default(MEDIUM)
  notes        String?
  createdAt    DateTime   @default(now())

  project      Project    @relation("ProjectSkills", fields: [projectId], references: [id], onDelete: Cascade)
  skill        Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([projectId, skillId])
  @@map("project_skills")
}
